/* Copyright (c) 2001 - 2013 OpenPlans - www.openplans.org. All rights reserved.
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */
package org.geoserver.platform;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class for exceptions generated by an OWS2.0 service.
 * <p>
 It adds support to HTTP return CODES.
 </p>
 *
 * @author Emanuele Tajariol - GeoSolutions
 */
public class OWS20Exception extends ServiceException {
    
    private static final Logger LOGGER = org.geotools.util.logging.Logging.getLogger(OWS20Exception.class);

    /**
     * Serial UID
     */
    private static final long serialVersionUID = 7254349181794561724L;

    public static class OWSExceptionCode {

        private static final Map<String, OWSExceptionCode> CODES = new HashMap<String, OWSExceptionCode>();

        public static final OWSExceptionCode OPERATION_NOT_SUPPORTED = new OWSExceptionCode("OperationNotSupported", 501, "Not Implemented");
        public static final OWSExceptionCode MISSING_PARAMETER_VALUE = new OWSExceptionCode("MissingParameterValue", 400, "Bad request");
        public static final OWSExceptionCode INVALID_PARAMETER_VALUE = new OWSExceptionCode("InvalidParameterValue", 400, "Bad request");
        public static final OWSExceptionCode VERSION_NEGOTIATION_FAILED = new OWSExceptionCode("VersionNegotiationFailed", 400, "Bad request");
        public static final OWSExceptionCode INVALID_UPDATE_SEQUENCE = new OWSExceptionCode("InvalidUpdateSequence", 400, "Bad request");
        public static final OWSExceptionCode OPTION_NOT_SUPPORTED = new OWSExceptionCode("OptionNotSupported", 501, "Not Implemented");
        public static final OWSExceptionCode NO_APPLICABLE_CODE = new OWSExceptionCode("NoApplicableCode", 500, "Not Implemented");
        public static final OWSExceptionCode INVALID_COVERAGE_TYPE = new OWSExceptionCode("InvalidCoverageType", 404, "Coverage addressed is not a grid coverage");

        private final String exceptionCode;
        private final Integer httpCode;
        private final String httpMessage;

        public OWSExceptionCode(final String exceptionCode) {
            this(exceptionCode, null, null);
        }

        public OWSExceptionCode(final String exceptionCode, final Integer httpCode) {
            this(exceptionCode, httpCode, null);
        }

        protected OWSExceptionCode(final String exceptionCode, final Integer httpCode, final String message) {
            this.exceptionCode = exceptionCode;
            this.httpCode = httpCode;
            this.httpMessage = message;

            final OWSExceptionCode old = CODES.put(exceptionCode, this);

            if(old != null) {
                LOGGER.log(Level.WARNING, "Replacing exception code {0} with {1}", new Object[]{old, this});
            }
        }

        public final String getExceptionCode() {
            return exceptionCode;
        }

        public final Integer getHttpCode() {
            return httpCode;
        }

        public final String getHttpMessage() {
            return httpMessage;
        }

        public static OWSExceptionCode getByCode(final String code) {
            return CODES.get(code);
        }

        @Override
        public final String toString() {
            final StringBuilder builder = new StringBuilder();
            builder.append(getClass().getSimpleName()).append("[exCode:").append(exceptionCode).append(" httpCode=").append(httpCode);
            if(httpMessage!=null){
                builder.append(" httpMessage=").append(httpMessage);
            }
            builder.append(']');
            return builder.toString() ;
        }
    }
    /**
     * HTTP response code. May be null when not specified.
     */
    private Integer httpCode;

    /**
     * Constructs the exception from a message.
     *
     * @param message The message describing the exception.
     */
    public OWS20Exception(final String message) {
        super(message);
    }

    /**
     * Constructs the exception from a message and causing exception.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     */
    public OWS20Exception(final String message, final Throwable cause) {
        super(message, cause);
    }

    /**
     * Constructs the exception from a message, causing exception, and code.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    public OWS20Exception(final String message, final Throwable cause, final String code) {
        this(message, cause);
    }

    /**
     * Constructs the exception from a message, causing exception, code, and locator.
     *
     * @param message The message describing the exception.
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(final String message, final Throwable cause, final String code, final String locator) {
        super(message, cause, code);
    }

    public OWS20Exception(final String message, final Throwable cause, final OWSExceptionCode code, final String locator) {
        super(message, cause, code.getExceptionCode());
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a message, and code.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     */
    protected OWS20Exception(final String message, final String code) {
        super(message);
    }

    public OWS20Exception(final String message, final OWSExceptionCode code) {
        super(message, code.getExceptionCode());
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a message,code, and locator.
     *
     * @param message The message describing the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(final String message, final String code, final String locator) {
        super(message, code);
    }

    public OWS20Exception(final String message, final OWSExceptionCode code, final String locator) {
        super(message, code.getExceptionCode(), locator);
        setHttpCode(code.getHttpCode());
    }

    /**
     * Constructs the exception from a causing exception.
     *
     * @param cause The case of the exception.
     */
    public OWS20Exception(final Throwable cause) {
        super(cause);
    }

    /**
     * Constructs the exception from causing exception, and code.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     */
    protected OWS20Exception(Throwable cause, String code) {
        super(cause);
    }

    /**
     * Constructs the exception from a causing exception, code, and locator.
     *
     * @param cause The case of the exception.
     * @param code The application specific exception code for the exception.
     * @param locator The application specific locator for the exception.
     */
    protected OWS20Exception(final Throwable cause, final String code, final String locator) {
        super(cause, code);
    }

    public OWS20Exception(final Throwable cause, final OWSExceptionCode code, final String locator) {
        super(cause, code.getExceptionCode());
        setHttpCode(code.getHttpCode());
    }

    public Integer getHttpCode() {
        return httpCode;
    }

    private void setHttpCode(Integer httpCode) {
        this.httpCode = httpCode;
    }

    @Override
    public final String toString() {
        final String msg = super.toString();

        if (httpCode == null) {
            return msg;
        } else {
            return msg + NEW_LINE + "HTTPcode:" + httpCode;
        }
    }
}

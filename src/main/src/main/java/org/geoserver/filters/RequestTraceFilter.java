/* (c) 2014 Open Source Geospatial Foundation - all rights reserved
 * (c) 2001 - 2013 OpenPlans
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */
package org.geoserver.filters;

import java.io.IOException;
import java.util.UUID;
import java.util.logging.Logger;

import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.geoserver.filters.SessionDebugFilter.SessionDebugWrapper;
import org.geoserver.platform.GeoServerExtensions;
import org.geotools.util.logging.Logging;
import org.slf4j.MDC;

/**
 * Filter to add/set a unique request ID for tracing purposes.
 */
public class RequestTraceFilter implements GeoServerFilter {

    protected String requestHeader;
    protected String responseHeader;

    static final Logger LOGGER = Logging.getLogger(RequestTraceFilter.class);

    public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
    
        if (req instanceof HttpServletRequest){
            HttpServletRequest httpRequest = (HttpServletRequest)req;
    
            String reqID = UUID.randomUUID().toString();
            
            if (requestHeader != null) {
                // This needs to be a "trusted" string, eg. generated by a controlled proxy.
                String providedID = httpRequest.getHeader(requestHeader);
                if (providedID != null && providedID.length() > 0) {
                    reqID = providedID;
                }
            }
            
            // set the logging context information
            MDC.put("requestTraceID", reqID);
    
            httpRequest.setAttribute("org.geoserver.requestTraceID", reqID);

            // add the trace ID as a response header
            HttpServletResponse httpResponse = (HttpServletResponse)res;
            httpResponse.addHeader(responseHeader, reqID);

            try {
                chain.doFilter(req, res);
            } finally {
                // clear the logging context information
                MDC.remove("requestTraceID");
            }
        } else {
            chain.doFilter(req, res);
        }
    }
    
    public void init(FilterConfig filterConfig) {
        // Set this property to read the Trace ID from a request header
        // This needs to be a "trusted" string, eg. generated by an admin-controlled reverse proxy.
        requestHeader = GeoServerExtensions.getProperty("GEOSERVER_REQUEST_TRACE_HEADER");
        responseHeader = (requestHeader != null) ? requestHeader : "GeoServer-Request-ID";
        LOGGER.info("Request Tracing: request header=" + requestHeader + "; response header=" + responseHeader);
    }
    
    @Override
    public void destroy() {
    }

}

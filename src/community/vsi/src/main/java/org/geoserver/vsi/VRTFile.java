/* (c) 2021 Open Source Geospatial Foundation - all rights reserved
 * This code is licensed under the GPL 2.0 license, available at the root
 * application directory.
 */

package org.geoserver.vsi;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import org.apache.log4j.Logger;
import org.gdal.gdal.Dataset;
import org.gdal.gdal.Driver;
import org.gdal.gdal.gdal;
import org.gdal.gdalconst.gdalconstConstants;
import org.gdal.osr.SpatialReference;
import org.geoserver.catalog.StoreInfo;
import org.geoserver.web.wicket.browser.FileRootsFinder;
import org.geotools.referencing.CRS;
import org.opengis.referencing.FactoryException;
import org.opengis.referencing.crs.CoordinateReferenceSystem;

/**
 * File abstraction for geometries stored in virtual file systems supported by GDAL. Provides access
 * to such resources via an intermediate VRT file generated by this class.
 *
 * @author Matthew Northcott <matthewnorthcott@catalyst.net.nz>
 */
public final class VRTFile {

    static final Logger LOGGER = Logger.getLogger(VRTFile.class.getName());

    private String path; // vsi-prefixed path
    private File vrt; // reference to local VRT file

    /**
     * Create a new instance from a virtual file path
     *
     * @param path vsi-prefixed string representing the path to the virtual file system
     * @param storeInfo an existing StoreInfo object for this resource
     */
    public VRTFile(String path, StoreInfo storeInfo) {
        if (storeInfo == null) {
            throw new IllegalArgumentException("Invalid storeInfo.");
        }

        final VSIFormat format = new VSIFormat();

        if (!format.accepts(path)) {
            throw new IllegalArgumentException("Invalid path: " + path);
        }

        // Determine VRT file path within data directory
        final String dataDir = new FileRootsFinder(false, true).getDataDirectory().toString();
        final String fileName = path.substring(path.lastIndexOf("/") + 1) + ".vrt";

        this.path = path;
        this.vrt =
                Paths.get(
                                dataDir,
                                "workspaces",
                                storeInfo.getWorkspace().getName(),
                                storeInfo.getName(),
                                fileName)
                        .toFile();
    }

    /**
     * Create a new instance from a virtual file path
     *
     * @param path vsi-prefixed string representing the path to the virtual file system
     */
    public VRTFile(String path) {
        this(path, VSIState.getStoreInfo());
    }

    /**
     * Apply the correct GDAL configuration options and attempt to open the resource
     *
     * @param path vsi-prefixed string representing the path to the virual file system
     * @return the Dataset object representing this resource
     */
    protected Dataset open(String path) throws IOException {
        VSIProperties.sync();
        return gdal.Open(path, gdalconstConstants.GA_ReadOnly);
    }

    /**
     * Get a File object of the VRT file representing the virtual file
     *
     * @return File object of VRT file representing the virtual file
     */
    public File getFile() {
        if (!this.vrt.exists()) {
            generate();
        }

        return this.vrt;
    }

    /**
     * Returns true if a VRT file exists for this resource
     *
     * @return boolean that determines the existance of a VRT file for this resource
     */
    public boolean exists() {
        return this.vrt.exists();
    }

    /**
     * Return the associated CRS object for this dataset
     *
     * @return CoordinateReferenceSystem object for this dataset
     */
    public CoordinateReferenceSystem getCRS() {
        Dataset dataset = null;

        try {
            dataset = open(this.path);
        } catch (IOException ex) {
            LOGGER.warn(ex.getMessage());
        }

        if (dataset != null) {
            final SpatialReference sref = new SpatialReference();

            try {
                sref.ImportFromWkt(dataset.GetProjection());
                sref.AutoIdentifyEPSG();

                return CRS.decode(
                        String.format(
                                "%s:%s",
                                sref.GetAttrValue("AUTHORITY"), sref.GetAttrValue("AUTHORITY", 1)));
            } catch (FactoryException ex) {
                LOGGER.warn("Unable to determine CRS of " + this.path);
            } finally {
                dataset.delete();
            }
        }

        return null;
    }

    /**
     * Copies the given Dataset object to a VRT file accessible through this resource
     *
     * @param dataset the source Dataset object to copy
     * @return Dataset object of the destination VRT resource
     */
    protected Dataset saveDatasetToVRT(Dataset dataset) throws IOException {
        final Driver driver = gdal.GetDriverByName("VRT");
        final String path = this.vrt.getAbsolutePath();

        if (dataset == null) {
            throw new IOException("Source dataset was null");
        }

        if (path.isEmpty()) {
            throw new IOException("Invalid destination path: " + path);
        }

        return driver.CreateCopy(path, dataset);
    }

    /** Generate a VRT file that provides a reference to the virtual file system data */
    protected void generate() {
        Dataset dataset = null;

        try {
            dataset = open(this.path);
        } catch (IOException ex) {
            throw new RuntimeException(ex.getMessage());
        }

        if (dataset == null) {
            throw new RuntimeException("Error reading source dataset: " + this.path);
        }

        try {
            saveDatasetToVRT(dataset);
        } catch (IOException ex) {
            throw new RuntimeException(ex.getMessage());
        } finally {
            dataset.delete();
        }

        if (!exists()) {
            throw new RuntimeException("Error creating file: " + this.vrt.getAbsolutePath());
        }
    }
}
